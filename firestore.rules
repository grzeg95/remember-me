rules_version = '2';

service cloud.firestore {

  match /databases/{database}/documents/config/{configId} {
    allow get: if true;
  }

  match /databases/{database}/documents/users/{userId} {

    // https://firebase.google.com/docs/firestore/pricing#firestore-rules
    // You are only charged one read per dependent document even if your rules refer to that document more than once
    function userIsOk() {
      return (
        userId == request.auth.uid && // owner
        (
        	request.auth.token.email_verified ||
          (
          	request.auth.token.keys().hasAny(['isAnonymous']) &&
            request.auth.token.isAnonymous
          ) ||
          request.auth.token.firebase.sign_in_provider == 'anonymous'
        ) &&
        !(
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('disabled', false)
        )
      );
    }

    allow get: if userIsOk();

    match /rounds/{roundId} {

      allow get: if userIsOk();
      allow list: if userIsOk() && request.query.limit == 5;

      match /today/{day} {

        allow list: if userIsOk();

        match /task/{taskId} {

          allow list: if userIsOk() && request.query.limit == 25;

          // set progress
          allow update: if (
            userIsOk() &&
            exists(/databases/$(database)/documents/users/$(userId)/rounds/$(roundId)/task/$(taskId)) &&
            request.resource.data.diff(resource.data).affectedKeys() == ['timesOfDay'].toSet() &&
            request.resource.data.timesOfDay.diff(resource.data.timesOfDay).affectedKeys().size() == 1 &&
            request.resource.data.timesOfDay.diff(resource.data.timesOfDay).changedKeys().size() == 1 &&
            request.resource.data.timesOfDay.values().toSet().hasOnly([true, false])
          );
        }
      }

      match /task/{taskId} {
        allow get: if userIsOk();
        allow list: if userIsOk() && request.query.limit == 25;
      }
    }
  }
}
