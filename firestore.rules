rules_version = '2';

service cloud.firestore {

  match /databases/{database}/documents/users/{userId} {

    // https://firebase.google.com/docs/firestore/pricing#firestore-rules
    // You are only charged one read per dependent document even if your rules refer to that document more than once

    function isNotDisabled() {
      return !(
       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('disabled', false)
     );
    }

    function isOwner() {
      return userId == request.auth.uid;
    }

    function isAnonymous() {
      return (
        request.auth.token.keys().hasAny(['isAnonymous']) &&
        request.auth.token.isAnonymous
      ) || request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function isEmailVerified() {
      return request.auth.token.email_verified;
    }

    function isUserVerifiedForModules() {
      return isOwner() && isNotDisabled() && (isEmailVerified() || isAnonymous());
    }

    allow get: if isOwner() && isNotDisabled();

    allow update: if (
      isUserVerifiedForModules() &&
      request.resource.data.diff(resource.data).affectedKeys() == ['photoUrl'].toSet() &&
      request.resource.data.diff(resource.data).removedKeys().size() == 1
    );

    match /rounds/{roundId} {

      allow get: if isUserVerifiedForModules();
      allow list: if isUserVerifiedForModules() && request.query.limit == 5;

      match /today/{day} {

        allow list: if isUserVerifiedForModules();

        match /task/{taskId} {

          allow list: if isUserVerifiedForModules() && request.query.limit == 25;

          // set progress
          allow update: if (
            isUserVerifiedForModules() &&
            exists(/databases/$(database)/documents/users/$(userId)/rounds/$(roundId)/task/$(taskId)) &&
            request.resource.data.diff(resource.data).affectedKeys() == ['timesOfDay'].toSet() &&
            request.resource.data.timesOfDay.diff(resource.data.timesOfDay).affectedKeys().size() == 1 &&
            request.resource.data.timesOfDay.diff(resource.data.timesOfDay).changedKeys().size() == 1 &&
            request.resource.data.timesOfDay.values().toSet().hasOnly([true, false])
          );
        }
      }

      match /task/{taskId} {
        allow get: if isUserVerifiedForModules();
        allow list: if isUserVerifiedForModules() && request.query.limit == 25;
      }
    }
  }
}
